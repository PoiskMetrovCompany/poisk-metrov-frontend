<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</title>
    @vite(['resources/css/candidatesProfiles/index.css'])
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://unpkg.com/imask"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
</head>
<body>
<div id="root"></div>

<script type="text/babel">
    <?php echo '@verbatim'; ?>
    const { useState, useEffect, useRef } = React;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    const log = (message, data = null, level = 'info') => {
        const timestamp = new Date().toLocaleTimeString();
        const prefix = `[${timestamp}] [${level.toUpperCase()}]`;
        
        if (data) {
            console.log(`${prefix} ${message}`, data);
        } else {
            console.log(`${prefix} ${message}`);
        }
    };

    // –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–∞–π–º–µ—Ä–∞
    function Timer({ timeLeft, onTimerEnd, isActive }) {
        const [time, setTime] = useState(timeLeft);

        useEffect(() => {
            if (!isActive) return;

            if (time <= 0) {
                log('–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º onTimerEnd');
                onTimerEnd();
                return;
            }

            const timer = setTimeout(() => {
                setTime(time - 1);
            }, 1000);

            return () => clearTimeout(timer);
        }, [time, isActive, onTimerEnd]);

        useEffect(() => {
            log(`–¢–∞–π–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${timeLeft} —Å–µ–∫—É–Ω–¥`);
            setTime(timeLeft);
        }, [timeLeft]);

        if (!isActive || time <= 0) return null;

        const minutes = Math.floor(time / 60);
        const seconds = time % 60;
        const timeString = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

        return <span>{timeString}</span>;
    }

    // –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    function CandidateRegForm() {
        const [isCodeMode, setIsCodeMode] = useState(false);
        const [phoneValue, setPhoneValue] = useState('');
        const [isCheckboxChecked, setIsCheckboxChecked] = useState(false);
        const [showCheckmark, setShowCheckmark] = useState(false);
        const [isLoading, setIsLoading] = useState(false);
        const [isAuthLoading, setIsAuthLoading] = useState(false);
        const [error, setError] = useState('');
        const [userAttributes, setUserAttributes] = useState(null);
        const [isAuthenticated, setIsAuthenticated] = useState(false);
        const [authResult, setAuthResult] = useState(null);
        const [timerActive, setTimerActive] = useState(false);
        const [timeLeft, setTimeLeft] = useState(60);
        
        const phoneInputRef = useRef(null);
        const currentMaskRef = useRef(null);
        const codeSubmitTimeoutRef = useRef(null);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        useEffect(() => {
            if (phoneInputRef.current && !isCodeMode) {
                log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                const maskOptions = {
                    mask: '+{7}(000) 000-00-00'
                };
                currentMaskRef.current = IMask(phoneInputRef.current, maskOptions);
            }

            return () => {
                if (currentMaskRef.current) {
                    log('–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                    currentMaskRef.current.destroy();
                }
            };
        }, [isCodeMode]);

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –¥–ª—è –∫–æ–¥–∞
        useEffect(() => {
            if (phoneInputRef.current && isCodeMode) {
                log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å–∫–∏ –¥–ª—è –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                if (currentMaskRef.current) {
                    currentMaskRef.current.destroy();
                }
                const maskOptions = {
                    mask: ' 0 0 0 0 0 0 ',
                    lazy: false,
                    placeholderChar: " _ "
                };
                currentMaskRef.current = IMask(phoneInputRef.current, maskOptions);
                
                phoneInputRef.current.focus();
                log('–§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∫–æ–¥–∞');
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ–∫—É—Å–∞ —á–µ—Ä–µ–∑ 100–º—Å
                setTimeout(() => {
                    if (phoneInputRef.current === document.activeElement) {
                        log('‚úÖ –§–æ–∫—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –Ω–∞ –ø–æ–ª–µ –∫–æ–¥–∞');
                    } else {
                        log('‚ùå –§–æ–∫—É—Å –ù–ï –Ω–∞ –ø–æ–ª–µ –∫–æ–¥–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ');
                        phoneInputRef.current.focus();
                    }
                }, 100);
            }
        }, [isCodeMode]);

        const checkButtonState = () => {
            if (!isCodeMode) {
                const isPhoneValid = phoneValue.length >= 17;
                log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏: —Ç–µ–ª–µ—Ñ–æ–Ω –≤–∞–ª–∏–¥–µ–Ω=${isPhoneValid}, —á–µ–∫–±–æ–∫—Å=${isCheckboxChecked}, –∑–∞–≥—Ä—É–∑–∫–∞=${isLoading}`);
                return isPhoneValid && isCheckboxChecked && !isLoading;
            }
            return false;
        };

        // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
        const checkCodeAndSetTimer = (value) => {
            log('üî¢ checkCodeAndSetTimer –≤—ã–∑–≤–∞–Ω–∞', { value });
            
            const enteredCode = value.replace(/\s/g, '').replace(/_/g, '');
            log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ="${value}", –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–¥="${enteredCode}", –¥–ª–∏–Ω–∞=${enteredCode.length}`);
            
            if (enteredCode.length === 6) {
                log('‚úì –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é (6 —Å–∏–º–≤–æ–ª–æ–≤)!', { code: enteredCode });
                setShowCheckmark(true);
                
                // –ï—Å–ª–∏ –∫–æ–¥ –ø–æ–ª–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É –±–µ–∑ —Ç–∞–π–º–µ—Ä–∞
                log('üöÄ –ö–æ–¥ –ø–æ–ª–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è!');
                
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (codeSubmitTimeoutRef.current) {
                    log('‚è∞ –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä - –∫–æ–¥ –ø–æ–ª–Ω—ã–π');
                    clearTimeout(codeSubmitTimeoutRef.current);
                    codeSubmitTimeoutRef.current = null;
                }
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
                setTimeout(() => {
                    log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–¥ —Å—Ä–∞–∑—É');
                    sendAuthRequest();
                }, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                
            } else {
                log(`‚è≥ –ö–æ–¥ –Ω–µ–ø–æ–ª–Ω—ã–π (${enteredCode.length}/6 —Å–∏–º–≤–æ–ª–æ–≤)`, { code: enteredCode });
                setShowCheckmark(false);
                
                // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏
                if (codeSubmitTimeoutRef.current) {
                    log('‚è∞ –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏');
                    clearTimeout(codeSubmitTimeoutRef.current);
                    codeSubmitTimeoutRef.current = null;
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞
                if (enteredCode.length > 0) {
                    log('‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ 2 —Å–µ–∫—É–Ω–¥—ã');
                    codeSubmitTimeoutRef.current = setTimeout(() => {
                        log('üöÄ –¢–ê–ô–ú–ï–† –°–†–ê–ë–û–¢–ê–õ! –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞');
                        const currentCode = value.replace(/\s/g, '').replace(/_/g, '');
                        log('–ù–µ–ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏', { 
                            originalValue: value, 
                            cleanedCode: currentCode, 
                            codeLength: currentCode.length 
                        });
                        
                        log('‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø–æ–ª–Ω—ã–π –∫–æ–¥ –ø–æ—Å–ª–µ –ø–∞—É–∑—ã');
                        sendAuthRequest();
                    }, 2000);

                    log('‚è∞ –¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, ID:', codeSubmitTimeoutRef.current);
                } else {
                    log('‚è∞ –ö–æ–¥ –ø—É—Å—Ç–æ–π, —Ç–∞–π–º–µ—Ä –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º');
                }
            }
        };

        const checkCode = (value) => {
            const enteredCode = value.replace(/\s/g, '').replace(/_/g, '');
            log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ="${value}", –æ—á–∏—â–µ–Ω–Ω—ã–π –∫–æ–¥="${enteredCode}", –¥–ª–∏–Ω–∞=${enteredCode.length}`);
            
            if (enteredCode.length === 6) {
                log('‚úì –ö–æ–¥ –≤–≤–µ–¥–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é (6 —Å–∏–º–≤–æ–ª–æ–≤)!', { code: enteredCode });
                setShowCheckmark(true);
                return true;
            } else {
                log(`‚è≥ –ö–æ–¥ –Ω–µ–ø–æ–ª–Ω—ã–π (${enteredCode.length}/6 —Å–∏–º–≤–æ–ª–æ–≤)`, { code: enteredCode });
                setShowCheckmark(false);
                return false;
            }
        };

        const handleInputChange = (e) => {
            const value = e.target.value;
            log('=== –ù–ê–ß–ê–õ–û handleInputChange ===');
            log('–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞', { value, isCodeMode });
            
            // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setPhoneValue(value);

            // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è
            if (error) {
                log('–û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ—à–∏–±–∫—É');
                setError('');
            }

            // –í —Ä–µ–∂–∏–º–µ –∫–æ–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É
            if (isCodeMode) {
                log('üî¢ –†–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º checkCodeAndSetTimer');
                checkCodeAndSetTimer(value);
            }
            
            log('=== –ö–û–ù–ï–¶ handleInputChange ===');
        };

        const handleCheckboxChange = (e) => {
            log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–µ–∫–±–æ–∫—Å–∞', { checked: e.target.checked });
            setIsCheckboxChecked(e.target.checked);
            if (error) {
                setError('');
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
        const sendCodeRequest = async (phone) => {
            try {
                log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞', { phone });
                setIsLoading(true);
                setError('');

                const response = await axios.post('/api/v1/account/set-code', {
                    phone: phone
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', response.data);

                if (response.data.request) {
                    setUserAttributes(response.data.attributes);
                    log('‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', response.data);
                    return true;
                } else {
                    log('‚ùå –û—à–∏–±–∫–∞: request=false –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞');
                    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞');
                    return false;
                }
            } catch (error) {
                log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–¥', error, 'error');

                if (error.response) {
                    log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞', {
                        status: error.response.status,
                        data: error.response.data
                    }, 'error');
                    
                    if (error.response.status === 404) {
                        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    } else {
                        setError(error.response.data?.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                    }
                } else if (error.request) {
                    log('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞)', error.request, 'error');
                    setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                } else {
                    log('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞', error.message, 'error');
                    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
                }
                return false;
            } finally {
                setIsLoading(false);
                log('–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–¥');
            }
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        const sendAuthRequest = async () => {
            log('üîê === –ù–ê–ß–ê–õ–û –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');
            
            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (codeSubmitTimeoutRef.current) {
                log('‚è∞ –û—á–∏—â–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏');
                clearTimeout(codeSubmitTimeoutRef.current);
                codeSubmitTimeoutRef.current = null;
            }

            try {
                setIsAuthLoading(true);
                setError('');

                let enteredCode = phoneValue;
                log('–ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –ø–æ–ª—è', { phoneValue });

                if (currentMaskRef.current && currentMaskRef.current.unmaskedValue) {
                    enteredCode = currentMaskRef.current.unmaskedValue;
                    log('–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –∏–∑ –º–∞—Å–∫–∏', { 
                        maskedValue: phoneValue,
                        unmaskedValue: enteredCode 
                    });
                } else {
                    enteredCode = phoneValue.replace(/\s/g, '').replace(/_/g, '');
                    log('–ö–æ–¥ –æ—á–∏—â–µ–Ω –≤—Ä—É—á–Ω—É—é', { 
                        original: phoneValue,
                        cleaned: enteredCode 
                    });
                }

                log('üîë –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏', { 
                    code: enteredCode, 
                    length: enteredCode.length 
                });

                if (enteredCode.length === 0) {
                    log('‚ùå –ö–æ–¥ –ø—É—Å—Ç–æ–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é');
                    setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –°–ú–°');
                    return false;
                }

                const phoneToAuth = userAttributes?.phone;
                if (!phoneToAuth) {
                    log('‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ userAttributes', userAttributes);
                    setError('–û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return false;
                }

                log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é', {
                    phone: phoneToAuth,
                    code: enteredCode,
                    codeLength: enteredCode.length
                });

                const response = await axios.post('/api/v1/account/auth', {
                    phone: phoneToAuth,
                    code: enteredCode
                }, {
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                log('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é', response.data);
                
                if (response.data.request && response.data.attributes) {
                    log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç!', response.data);

                    if (response.data.attributes.access_token) {
                        const expirationDate = new Date();
                        expirationDate.setTime(expirationDate.getTime() + (30 * 24 * 60 * 60 * 1000));
                        document.cookie = `access_token=${response.data.attributes.access_token}; expires=${expirationDate.toUTCString()}; path=/; SameSite=Strict`;
                        
                        log('üç™ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ cookie', { 
                            token: response.data.attributes.access_token.substring(0, 20) + '...',
                            expires: expirationDate.toUTCString()
                        });
                        
                        const redirectUrl = response.data.attributes.user.role === "candidate" ? '/profile-candidates/' : '/profile-candidates/security/';
                        log('üîÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞', { 
                            role: response.data.attributes.user.role,
                            url: redirectUrl 
                        });
                        
                        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—Ö–∞
                        window.location.href = redirectUrl;
                        return true;
                    }

                    return true;
                } else {
                    log('‚ùå –ù–µ—É—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', {
                        request: response.data.request,
                        hasAttributes: !!response.data.attributes
                    });
                    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
                    return false;
                }
            } catch (error) {
                log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', error, 'error');

                if (error.response) {
                    log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', {
                        status: error.response.status,
                        data: error.response.data
                    }, 'error');
                    
                    if (error.response.status === 401) {
                        setError('–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥');
                        log('üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                    } else if (error.response.status === 404) {
                        setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                        log('üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    } else {
                        setError(error.response.data?.error || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
                    }
                } else if (error.request) {
                    log('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', error.request, 'error');
                    setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
                } else {
                    log('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', error.message, 'error');
                    setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞');
                }
                return false;
            } finally {
                setIsAuthLoading(false);
                log('üîê === –ö–û–ù–ï–¶ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===');
            }
        };

        const startTimer = () => {
            log('‚è∞ –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥');
            setTimeLeft(60);
            setTimerActive(true);
        };

        const handleTimerEnd = () => {
            log('‚è∞ –¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
            setTimerActive(false);
        };

        const handleGetCodeClick = async (e) => {
            e.preventDefault();
            log('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞', { isCodeMode });

            if (!isCodeMode) {
                log('üì± –ü–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ –Ω–æ–º–µ—Ä', { phone: phoneValue });
                const success = await sendCodeRequest(phoneValue);

                if (success) {
                    log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–¥–∞');
                    setIsCodeMode(true);
                    setPhoneValue('');
                    setShowCheckmark(false);
                    startTimer();
                }
            } else {
                log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞');
                const phoneToResend = userAttributes?.phone || phoneValue;
                log('–ù–æ–º–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏', { phoneToResend });
                
                const success = await sendCodeRequest(phoneToResend);

                if (success) {
                    log('‚úÖ –ö–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
                    setPhoneValue('');
                    setShowCheckmark(false);
                    startTimer();
                }
            }
        };

        const handleChangeNumber = (e) => {
            e.preventDefault();
            log('üîÑ –°–º–µ–Ω–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');

            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏
            if (codeSubmitTimeoutRef.current) {
                log('‚è∞ –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–æ–º–µ—Ä–∞');
                clearTimeout(codeSubmitTimeoutRef.current);
                codeSubmitTimeoutRef.current = null;
            }

            setIsCodeMode(false);
            setPhoneValue('');
            setShowCheckmark(false);
            setError('');
            setUserAttributes(null);
            setIsAuthenticated(false);
            setAuthResult(null);
            setTimerActive(false);

            setTimeout(() => {
                if (phoneInputRef.current) {
                    phoneInputRef.current.focus();
                    log('–§–æ–∫—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø–æ–ª–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
                }
            }, 0);
        };

        // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        useEffect(() => {
            return () => {
                if (codeSubmitTimeoutRef.current) {
                    log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
                    clearTimeout(codeSubmitTimeoutRef.current);
                }
            };
        }, []);

        const getButtonText = () => {
            if (isLoading) {
                return "–û—Ç–ø—Ä–∞–≤–∫–∞...";
            }
            if (!isCodeMode) {
                return "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥";
            }
            
            return timerActive ? (
                <>
                    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ <Timer 
                        timeLeft={timeLeft} 
                        onTimerEnd={handleTimerEnd} 
                        isActive={timerActive} 
                    />
                </>
            ) : "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ";
        };

        const getButtonClass = () => {
            if (isLoading) {
                return "formBtn btn-inactive";
            }
            if (!isCodeMode) {
                return checkButtonState() ? "formBtn btn-active" : "formBtn btn-inactive";
            }
            // –í —Ä–µ–∂–∏–º–µ –∫–æ–¥–∞ –∫–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–π–º–µ—Ä –Ω–µ –∏–¥–µ—Ç
            return !timerActive ? "formBtn btn-active" : "formBtn btn-inactive";
        };

        const isButtonDisabled = () => {
            if (isLoading) return true;
            if (!isCodeMode) return !checkButtonState();
            // –í —Ä–µ–∂–∏–º–µ –∫–æ–¥–∞ –∫–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∫–∞ –∏–¥–µ—Ç —Ç–∞–π–º–µ—Ä
            return timerActive;
        };

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - —Å—Ä–∞–∑—É —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º
        // if (isAuthenticated && authResult) { ... } - –±–ª–æ–∫ —É–¥–∞–ª–µ–Ω

        return (
            <>
                <header>
                    <img src="/img/Logo —Å —Ç–µ–∫—Å—Ç–æ–º.png" alt="–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∞–≥–µ–Ω—Å—Ç–≤–∞ –∏ –ø–æ–¥–ø–∏—Å—å—é –ü–æ–∏—Å–∫ –º–µ—Ç—Ä–æ–≤" />
                </header>

                <main>
                    <section>
                        <div className="center-card">
                            <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</h1>
                            <p>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–Ω–∫–µ—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞</p>

                            <form action="#">
                                <div className="input-container">
                                    <label htmlFor="phoneNumber" id="formLabel" className="formLabel">
                                        {isCodeMode ? "–ö–æ–¥ –∏–∑ –°–ú–°" : "–¢–µ–ª–µ—Ñ–æ–Ω"}
                                    </label>
                                    <input
                                        type="tel"
                                        name="phoneNumber"
                                        id="phoneNumber"
                                        className="formInput"
                                        placeholder={isCodeMode ? "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –°–ú–°" : "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä"}
                                        value={phoneValue}
                                        onChange={handleInputChange}
                                        onInput={(e) => {
                                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–¥–∞
                                            log('üìù onInput —Å–æ–±—ã—Ç–∏–µ', { 
                                                value: e.target.value, 
                                                isCodeMode 
                                            });
                                            
                                            if (isCodeMode) {
                                                log('üî¢ onInput –≤ —Ä–µ–∂–∏–º–µ –∫–æ–¥–∞ - –¥—É–±–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
                                                // –î—É–±–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–æ–¥–∞
                                                const value = e.target.value;
                                                setPhoneValue(value);
                                                checkCodeAndSetTimer(value);
                                            }
                                        }}
                                        onKeyUp={(e) => {
                                            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–ø—É—Å–∫–∞–Ω–∏–µ –∫–ª–∞–≤–∏—à
                                            log('‚å®Ô∏è onKeyUp —Å–æ–±—ã—Ç–∏–µ', { 
                                                key: e.key, 
                                                value: e.target.value,
                                                isCodeMode 
                                            });
                                        }}
                                        ref={phoneInputRef}
                                        disabled={isLoading || isAuthLoading}
                                    />
                                    {showCheckmark && (
                                        <div className="checkmark-icon" id="checkmarkIcon">
                                            <svg viewBox="0 0 24 24">
                                                <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
                                            </svg>
                                        </div>
                                    )}
                                </div>

                                {error && (
                                    <div className="error-message">
                                        {error}
                                    </div>
                                )}

                                <button
                                    id="getCodeBtn"
                                    className={getButtonClass()}
                                    disabled={isButtonDisabled()}
                                    onClick={handleGetCodeClick}
                                >
                                    {getButtonText()}
                                </button><br />

                                <div
                                    className="checkboxRow"
                                    id="checkboxRow"
                                    style={{display: isCodeMode ? 'none' : 'flex'}}
                                >
                                    <label className="custom-checkbox" htmlFor="personalData">
                                        <input
                                            type="checkbox"
                                            name="personalData"
                                            id="personalData"
                                            checked={isCheckboxChecked}
                                            onChange={handleCheckboxChange}
                                            disabled={isLoading || isAuthLoading}
                                        />
                                        <span className="checkmark"></span>
                                    </label>
                                    <label htmlFor="personalData">
                                        –Ø –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É <span>—Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</span>
                                    </label>
                                </div>
                            </form>

                            {isCodeMode && (
                                <>
                                    <a
                                        href="#"
                                        id="changeNumber"
                                        onClick={handleChangeNumber}
                                    >
                                        –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
                                    </a>
                                    <p style={{fontSize: '14px', color: '#666', marginTop: '10px'}}>
                                    </p>
                                </>
                            )}
                        </div>
                    </section>
                </main>
            </>
        );
    }

    function App() {
        const [isCalendarOpen, setIsCalendarOpen] = useState(false);
        const [currentView, setCurrentView] = useState('table'); // 'table' –∏–ª–∏ 'form'
        const [selectedCandidate, setSelectedCandidate] = useState(null);
        const filtersButtonRef = useRef(null);

        const handleFiltersClick = () => {
            console.log('–ö–Ω–æ–ø–∫–∞ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞–∂–∞—Ç–∞'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            setIsCalendarOpen(true);
        };

        const handleCalendarClose = () => {
            console.log('–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è'); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            setIsCalendarOpen(false);
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –ø–æ —Å—Ç—Ä–æ–∫–µ —Ç–∞–±–ª–∏—Ü—ã
        const handleRowClick = (vacancyKey) => {
            setSelectedCandidate(vacancyKey);
            setCurrentView('form');
        };

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ
        const handleBackToTable = () => {
            setCurrentView('table');
            setSelectedCandidate(null);
        };

        return (
            <>
                <CandidateRegForm />
            </>
        );
    }

    // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    ReactDOM.render(React.createElement(App), document.getElementById('root'));
    <?php echo '@endverbatim'; ?>
</script>
</body>
</html>