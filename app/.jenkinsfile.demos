#!groovy
properties([disableConcurrentBuilds()])
pipeline {
    agent any
    options {
        timestamps()
    }

    environment {
        DEPLOY_SERVER = '89.111.153.73'
        DEPLOY_PATH = '/root/poisk-metrov-frontend'
    }

    stages {
        stage('Проверка статуса') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                            cd ${DEPLOY_PATH} &&
                            git checkout develop &&
                            git status &&
                            docker ps &&
                            echo 'Сервер доступен и готов к развертыванию'
                        "
                    """
                }
            }
        }

        stage('Стягивание изменений') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                            cd ${DEPLOY_PATH} &&
                            git pull
                        "
                    """
                }
            }
        }

        stage('Перезапуск окружения') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                            cd ${DEPLOY_PATH} &&
                            docker-compose down && docker-compose up --build -d
                        "
                    """
                }
            }
        }

            stage('Запуск тестов') {
                steps {
                    withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh """
                            sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                                cd ${DEPLOY_PATH} &&
                                echo 'TODO: необходимо реализовать ТЕСТЫ'
                            "
                        """
                    }
                }
            }

        stage('Проверка статуса окружения') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                            cd ${DEPLOY_PATH} &&
                            docker ps
                        "
                    """
                }
            }
        }

        stage('Обновление миграций, сброс кэша, генерация документации') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'server-password', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh """
                        sshpass -p '${PASSWORD}' ssh -o StrictHostKeyChecking=no ${USERNAME}@${DEPLOY_SERVER} "
                            cd ${DEPLOY_PATH} &&
                            echo 'TODO: добавить "docker-compose run php-fpm php artisan migrate &&"'
                            docker-compose run php-fpm php artisan cache:clear &&
                            docker-compose run php-fpm php artisan optimize:clear &&
                            docker-compose run php-fpm php artisan l5-swagger:generate
                            docker-compose run php-fpm php artisan app:update-cache-application-command
                        "
                    """
                }
            }
        }
    }

    post {
        success {
            echo 'Развертывание из development прошло успешно!'
        }
        failure {
            echo 'Ошибка развёртывания!'
        }
    }
}